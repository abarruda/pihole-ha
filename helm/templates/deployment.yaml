apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}-{{ .Chart.Version }}-deployment
  labels:
    app: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}-{{ .Chart.Version }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}-{{ .Chart.Version }}
      annotations:
        config-checksum: {{ .Values.dns.custom | print | sha256sum }}

    spec:

      volumes:
      {{- if .Values.storage.enabled }}  
      - name: {{ .Chart.Name }}-{{ .Chart.AppVersion }}-data-etc-pihole
        persistentVolumeClaim:
          claimName: {{ .Chart.Name }}-{{ .Chart.AppVersion }}-pihole-root-pvclaim
      {{- end }}

      - name: config-volume
        configMap:
          name: {{ .Values.config.name }}

      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          {{- range .Values.container.nameservers }}
          - {{ . }}
          {{- end }}

        # options:
        #   - name: rotate
        #   - name: timeout
        #     value: "1"

      containers:
        - name: {{ .Chart.Name }}-{{ .Chart.AppVersion }}-container
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          ports:
            - name: dns-tcp
              containerPort: {{ .Values.service.dns.port }}
              protocol: TCP

            - name: dns-udp
              containerPort: {{ .Values.service.dns.port }}
              protocol: UDP

            - name: dhcp-udp
              containerPort: {{ .Values.service.dhcp.port }}
              protocol: UDP

            - name: http-tcp
              containerPort: {{ .Values.service.http.port }}
              protocol: TCP

            - name: https-tcp
              containerPort: {{ .Values.service.https.port }}
              protocol: TCP

          volumeMounts:
            {{- if .Values.storage.enabled }}
            - name: {{ .Chart.Name }}-{{ .Chart.AppVersion }}-data-etc-pihole
              mountPath: /etc/pihole
            {{- end }}
            - name: config-volume
              mountPath: /etc/pihole/pihole-FTL.conf
              subPath: pihole-FTL.conf
            - name: config-volume
              mountPath: /etc/dnsmasq.d/custom-dns.conf
              subPath: custom-dns.conf
            {{- if .Values.config.adlists }}  
            - name: config-volume
              mountPath: /etc/pihole/adlists.list
              subPath: adlists.list
            {{- end }}
            {{- if .Values.config.blacklist }}
            - name: config-volume
              mountPath: /etc/pihole/black.list
              subPath: black.list
            - name: config-volume
              mountPath: /etc/pihole/blacklist.txt
              subPath: blacklist.txt
            {{- end }}
            {{- if .Values.config.blacklistRegex }}
            - name: config-volume
              mountPath: /etc/pihole/regex.list
              subPath: regex.list
            {{- end }}
            {{- if .Values.config.whitelist }}
            - name: config-volume
              mountPath: /etc/pihole/whitelist.txt
              subPath: whitelist.txt
            {{- end }}

          env:
            - name: DNS1
              value: {{ .Values.dns._1 }}
            - name: DNS2
              value: {{ .Values.dns._2 }}
            - name: ServerIP
              value: {{ .Values.service.ip }}
            - name: TZ
              value: {{ .Values.timezone }}
            - name: WEBPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.ui.name }}
                  key: password

          # livenessProbe:
          #   exec:
          #     command:
          #       - nslookup
          #       - -timeout=2
          #       - google.com
          #       - {{ .Values.service.ip }}
          #   initialDelaySeconds: 60
          #   periodSeconds: 30
            # httpGet:
            #   path: /
            #   port: http-tcp
            # initialDelaySeconds: 60
            # periodSeconds: 30

          livenessProbe:
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            initialDelaySeconds: 120
            timeoutSeconds: 5
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5

          readinessProbe:
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 20

      {{- if .Values.affinity.value }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ .Values.affinity.weight }}
              preference:
                matchExpressions:
                  - key: "{{ .Values.affinity.label }}"
                    operator: In
                    values: 
                      {{- range .Values.affinity.value }}
                      - {{ . | quote }}
                      {{- end }}
      {{- end }}